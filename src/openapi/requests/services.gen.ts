// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetPageResponse, GetPageTitleByTitleData, GetPageTitleByTitleResponse, GetPageTitleByTitleByRevisionData, GetPageTitleByTitleByRevisionResponse, GetPageHtmlByTitleData, GetPageHtmlByTitleResponse, GetFormatRevisionData, GetFormatRevisionResponse, GetPageDataParsoidByTitleByRevisionByTidData, GetPageDataParsoidByTitleByRevisionByTidResponse, GetPageLintByTitleData, GetPageLintByTitleResponse, GetPageLintByTitleByRevisionData, GetPageLintByTitleByRevisionResponse, GetPageSegmentsByTitleData, GetPageSegmentsByTitleResponse, GetPageSegmentsByTitleByRevisionData, GetPageSegmentsByTitleByRevisionResponse, GetPageSummaryByTitleData, GetPageSummaryByTitleResponse, GetContentMediaListData, GetContentMediaListResponse, GetContentWithRevisionMediaListData, GetContentWithRevisionMediaListResponse, GetContentMobileHtmlData, GetContentMobileHtmlResponse, GetContentWithRevisionMobileHtmlData, GetContentWithRevisionMobileHtmlResponse, GetPageMobileHtmlOfflineResourcesByTitleData, GetPageMobileHtmlOfflineResourcesByTitleResponse, GetPageMobileHtmlOfflineResourcesByTitleByRevisionData, GetPageMobileHtmlOfflineResourcesByTitleByRevisionResponse, GetRelatedPagesData, GetRelatedPagesResponse, GetPageRandomByFormatData, GetPageRandomByFormatResponse, GetPagePdfByTitleData, GetPagePdfByTitleResponse, GetPagePdfByTitleByFormatData, GetPagePdfByTitleByFormatResponse, GetPagePdfByTitleByFormatByTypeData, GetPagePdfByTitleByFormatByTypeResponse, GetSectionsData, GetSectionsResponse, GetSectionsWithRevisionData, GetSectionsWithRevisionResponse, GetSectionsLeadData, GetSectionsLeadResponse, GetSectionsLeadWithRevisionData, GetSectionsLeadWithRevisionResponse, GetSectionsRemainingData, GetSectionsRemainingResponse, GetSectionsRemainingWithRevisionData, GetSectionsRemainingWithRevisionResponse, GetDataCssMobileByTypeData, GetDataCssMobileByTypeResponse, GetDataJavascriptMobileByTypeData, GetDataJavascriptMobileByTypeResponse, GetDataI18nByTypeData, GetDataI18nByTypeResponse, GetPageTalkByTitleData, GetPageTalkByTitleResponse, GetPageTalkByTitleByRevisionData, GetPageTalkByTitleByRevisionResponse, AggregatedFeedData, AggregatedFeedResponse, GetFeedAnnouncementsResponse, OnThisDayData, OnThisDayResponse, PostTransformHtmlToWikitextData, PostTransformHtmlToWikitextResponse, PostTransformHtmlToWikitextByTitleData, PostTransformHtmlToWikitextByTitleResponse, PostTransformHtmlToWikitextByTitleByRevisionData, PostTransformHtmlToWikitextByTitleByRevisionResponse, PostTransformWikitextToHtmlData, PostTransformWikitextToHtmlResponse, PostTransformWikitextToHtmlByTitleData, PostTransformWikitextToHtmlByTitleResponse, PostTransformWikitextToHtmlByTitleByRevisionData, PostTransformWikitextToHtmlByTitleByRevisionResponse, PostTransformWikitextToLintData, PostTransformWikitextToLintResponse, PostTransformWikitextToLintByTitleData, PostTransformWikitextToLintByTitleResponse, PostTransformWikitextToLintByTitleByRevisionData, PostTransformWikitextToLintByTitleByRevisionResponse, TransformWikitextToMobileHtmlData, TransformWikitextToMobileHtmlResponse, DoMtData, DoMtResponse, DoMtProviderData, DoMtProviderResponse, DoDictData, DoDictResponse, DoDictProviderData, DoDictProviderResponse, PostMediaMathCheckByTypeData, PostMediaMathCheckByTypeResponse, GetMediaMathFormulaByHashData, GetMediaMathFormulaByHashResponse, GetMediaMathRenderByFormatByHashData, GetMediaMathRenderByFormatByHashResponse, GetCitationData, GetCitationResponse, PostDataListsSetupData, PostDataListsSetupResponse, PostDataListsTeardownData, PostDataListsTeardownResponse, GetDataListsData, GetDataListsResponse, PostDataListsData, PostDataListsResponse, PutDataListsByIdData, PutDataListsByIdResponse, DeleteDataListsByIdData, DeleteDataListsByIdResponse, PostDataListsBatchData, PostDataListsBatchResponse, GetListEntriesData, GetListEntriesResponse, PostDataListsByIdEntriesData, PostDataListsByIdEntriesResponse, DeleteDataListsByIdEntriesByEntryIdData, DeleteDataListsByIdEntriesByEntryIdResponse, PostDataListsByIdEntriesBatchData, PostDataListsByIdEntriesBatchResponse, GetDataListsPagesByProjectByTitleData, GetDataListsPagesByProjectByTitleResponse, GetDataListsChangesSinceByDateData, GetDataListsChangesSinceByDateResponse, GetDataRecommendationArticleCreationTranslationByFromLangData, GetDataRecommendationArticleCreationTranslationByFromLangResponse, GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleData, GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleResponse, GetDataRecommendationArticleCreationMorelikeBySeedArticleData, GetDataRecommendationArticleCreationMorelikeBySeedArticleResponse } from './types.gen';

export class PageContentService {
    /**
     * List page-related API entry points.
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     *
     * @returns listing A list of page-related API end points.
     * @returns problem Error
     * @throws ApiError
     */
    public static getPage(): CancelablePromise<GetPageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/'
        });
    }
    
    /**
     * Get revision metadata for a title.
     * Returns the revision metadata for the given title. If a revision ID is provided,
     * metadata for that revision is returned, otherwise the latest revision ID is assumed.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns revision The latest revision metadata for the provided title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageTitleByTitle(data: GetPageTitleByTitleData): CancelablePromise<GetPageTitleByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/title/{title}',
            path: {
                title: data.title
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title or no revisions found.'
            }
        });
    }
    
    /**
     * Get revision metadata for a title.
     * Returns the revision metadata for the given title. If a revision ID is provided,
     * metadata for that revision is returned, otherwise the latest revision ID is assumed.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The revision id
     * @returns revision The latest revision metadata for the provided title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageTitleByTitleByRevision(data: GetPageTitleByTitleByRevisionData): CancelablePromise<GetPageTitleByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/title/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title or no revisions found.'
            }
        });
    }
    
    /**
     * Get latest HTML for a title.
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.stash Whether to temporary stash data-parsoid in order to support transforming the
     * modified content later. If this parameter is set, requests are rate-limited on
     * a per-client basis (max 5 requests per second per client)
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown The latest HTML for the given page title.
     *
     * See [the MediaWiki DOM
     * spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a
     * description of the MediaWiki-specific semantic markup in this HTML.
     * Note that additional metadata is available in the HTML head.
     *
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageHtmlByTitle(data: GetPageHtmlByTitleData): CancelablePromise<GetPageHtmlByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/html/{title}',
            path: {
                title: data.title
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect,
                stash: data.stash
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target, and the body contains the actual page contents as HTML.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get HTML for a specific title/revision & optionally timeuuid.
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The revision
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.stash Whether to temporary stash data-parsoid in order to support transforming the
     * modified content later. If this parameter is set, requests are rate-limited on
     * a per-client basis (max 5 requests per second per client)
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown The html for the given page, revision and tid.
     *
     * See [the MediaWiki DOM
     * spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a
     * description of the MediaWiki-specific semantic markup in this HTML.
     * Note that additional metadata is available in the HTML head.
     *
     * This HTML can be edited using arbitrary HTML tools. The modified HTML
     * can be converted back to wikitext using the
     * [/transform/html/to/wikitext{/title}{/revision}](#!/Transforms/transform_html_to_wikitext__title___revision__post)
     * entry point.
     *
     * @returns problem Error
     * @throws ApiError
     */
    public static getFormatRevision(data: GetFormatRevisionData): CancelablePromise<GetFormatRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/html/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect,
                stash: data.stash
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target, and the body contains the actual page revision contents as HTML.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                400: 'Invalid revision or tid',
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page, revision or tid'
            }
        });
    }
    
    /**
     * Get data-parsoid metadata for a specific title/revision/tid.
     * Data-parsoid is metadata used by
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) to support clean
     * round-tripping conversions between HTML and Wikitext. Among other
     * things, it contains the original Wikitext offsets of each HTML
     * element, keyed by element ID. The format is unstable.
     *
     * The metadata in data-parsoid is specific to a specific HTML render.
     * For this reason, you need to supply the exact `revision` and `tid` as
     * provided in the `ETag` header of the HTML response.
     *
     * Stability: [Stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The revision
     * @param data.tid The revision's time ID
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns data_parsoid The latest Parsoid data for the given page
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageDataParsoidByTitleByRevisionByTid(data: GetPageDataParsoidByTitleByRevisionByTidData): CancelablePromise<GetPageDataParsoidByTitleByRevisionByTidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/data-parsoid/{title}/{revision}/{tid}',
            path: {
                title: data.title,
                revision: data.revision,
                tid: data.tid
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target, and the body contains the actual data-parsoid for the redirect page.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                400: 'Invalid revision',
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page, revision or tid'
            }
        });
    }
    
    /**
     * Get the linter errors for a specific title/revision.
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns unknown The lint errors for the given page and optionally revision.
     *
     * See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more
     * details.
     *
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageLintByTitle(data: GetPageLintByTitleData): CancelablePromise<GetPageLintByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/lint/{title}',
            path: {
                title: data.title
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target, and the body contains the actual page revision contents as HTML.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                400: 'Invalid revision or tid',
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page, revision or tid'
            }
        });
    }
    
    /**
     * Get the linter errors for a specific title/revision.
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The revision
     * @returns unknown The lint errors for the given page and optionally revision.
     *
     * See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more
     * details.
     *
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageLintByTitleByRevision(data: GetPageLintByTitleByRevisionData): CancelablePromise<GetPageLintByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/lint/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target, and the body contains the actual page revision contents as HTML.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                400: 'Invalid revision or tid',
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page, revision or tid'
            }
        });
    }
    
    /**
     * Fetches a segmented page to be used in machine translation
     * Use this end point to fetch the segmented content of a page. Clients should
     * use the returned content in conjunction with the [language transform
     * API](https://wikimedia.org/api/rest_v1/#!/Transform).
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns unknown The segmented page for the given title and revision
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageSegmentsByTitle(data: GetPageSegmentsByTitleData): CancelablePromise<GetPageSegmentsByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/segments/{title}',
            path: {
                title: data.title
            },
            errors: {
                400: 'Invalid revision',
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page or revision'
            }
        });
    }
    
    /**
     * Fetches a segmented page to be used in machine translation
     * Use this end point to fetch the segmented content of a page. Clients should
     * use the returned content in conjunction with the [language transform
     * API](https://wikimedia.org/api/rest_v1/#!/Transform).
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The revision id
     * @returns unknown The segmented page for the given title and revision
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageSegmentsByTitleByRevision(data: GetPageSegmentsByTitleByRevisionData): CancelablePromise<GetPageSegmentsByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/segments/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            errors: {
                400: 'Invalid revision',
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page or revision'
            }
        });
    }
    
    /**
     * Get basic metadata and simplified article introduction.
     * The summary response includes an extract of the first paragraph of the page in plain text
     * and HTML as well as the type of page. This is useful for page previews (fka. Hovercards,
     * aka. Popups) on the web and link previews in the apps.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns summary The summary for the given page
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageSummaryByTitle(data: GetPageSummaryByTitleData): CancelablePromise<GetPageSummaryByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/summary/{title}',
            path: {
                title: data.title
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get list of media files used on a page.
     * Gets the list of media items (images, audio, and video) in the order in which they appear on a
     * given wiki page.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns media_list JSON containing metadata of media items appearing on the given page.
     * @returns problem Error
     * @throws ApiError
     */
    public static getContentMediaList(data: GetContentMediaListData): CancelablePromise<GetContentMediaListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/media-list/{title}',
            path: {
                title: data.title
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get list of media files used on a page.
     * Gets the list of media items (images, audio, and video) in the order in which they appear on a
     * given wiki page.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns media_list JSON containing metadata of media items appearing on the given page.
     * @returns problem Error
     * @throws ApiError
     */
    public static getContentWithRevisionMediaList(data: GetContentWithRevisionMediaListData): CancelablePromise<GetContentWithRevisionMediaListResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/media-list/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get page content HTML optimized for mobile consumption.
     * Gets the content HTML optimized for mobile consumption for the given page. This content
     * is derived from Parsoid HTML (see `/page/html/{title}` endpoint).
     * The difference to Parsoid HTML is roughly:
     * * Some elements and attributes not needed for the reading case are removed.
     * * LeadIntroductionTransform: The introductory paragraph is moved before an infobox.
     * * RedLinks: Red links are flattened (=turned into span elements).
     * * WidenImage: images that should be displayed in gallery are widened.
     * * Section headings are slightly changed by wrapping the headings inside a div and adding
     * a span element inside the new div for the edit buttons.
     * * Additional classes are added to img elements to fix issues with non-white backgrounds.
     * See Theme support below for instructions on how to enable that.
     * * Pagelib CSS files needed to display the content are referenced.
     * * LazyLoadTransform: server-side portion/prep for lazy loading of images.
     * * CollapseTable: server-side portion/prep for collapsing tables.
     *
     * What's not included? What parts of the PageLibrary does a client still have to do?
     * * Theme support: Themes can be turned on by adding a theme class to the root <html> tag.
     * Possible class names are:
     * * `pagelib_theme_default`
     * * `pagelib_theme_dark`
     * * `pagelib_theme_black`
     * * `pagelib_theme_sepia`
     *
     * The pagelib JS has functionality to do that: ThemeTransform.setTheme(document, theme).
     * * Dim images: DimImagesTransform.dim(window, enable)
     * * PlatformTransform.classify(window) to trigger Android and iOS app specific CSS rules
     * * LazyLoadTransformer: client side companion of LazyLoadTransform (note the extra *er*
     * here)
     * * FooterTransformer: seems to be more UI than content, requires I18N, too
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns string mobile-optimized HTML of the given page.
     * @returns problem Error
     * @throws ApiError
     */
    public static getContentMobileHtml(data: GetContentMobileHtmlData): CancelablePromise<GetContentMobileHtmlResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-html/{title}',
            path: {
                title: data.title
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get page content HTML optimized for mobile consumption.
     * Gets the content HTML optimized for mobile consumption for the given page. This content
     * is derived from Parsoid HTML (see `/page/html/{title}` endpoint).
     * The difference to Parsoid HTML is roughly:
     * * Some elements and attributes not needed for the reading case are removed.
     * * LeadIntroductionTransform: The introductory paragraph is moved before an infobox.
     * * RedLinks: Red links are flattened (=turned into span elements).
     * * WidenImage: images that should be displayed in gallery are widened.
     * * Section headings are slightly changed by wrapping the headings inside a div and adding
     * a span element inside the new div for the edit buttons.
     * * Additional classes are added to img elements to fix issues with non-white backgrounds.
     * See Theme support below for instructions on how to enable that.
     * * Pagelib CSS files needed to display the content are referenced.
     * * LazyLoadTransform: server-side portion/prep for lazy loading of images.
     * * CollapseTable: server-side portion/prep for collapsing tables.
     *
     * What's not included? What parts of the PageLibrary does a client still have to do?
     * * Theme support: Themes can be turned on by adding a theme class to the root <html> tag.
     * Possible class names are:
     * * `pagelib_theme_default`
     * * `pagelib_theme_dark`
     * * `pagelib_theme_black`
     * * `pagelib_theme_sepia`
     *
     * The pagelib JS has functionality to do that: ThemeTransform.setTheme(document, theme).
     * * Dim images: DimImagesTransform.dim(window, enable)
     * * PlatformTransform.classify(window) to trigger Android and iOS app specific CSS rules
     * * LazyLoadTransformer: client side companion of LazyLoadTransform (note the extra *er*
     * here)
     * * FooterTransformer: seems to be more UI than content, requires I18N, too
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns string mobile-optimized HTML of the given page.
     * @returns problem Error
     * @throws ApiError
     */
    public static getContentWithRevisionMobileHtml(data: GetContentWithRevisionMobileHtmlData): CancelablePromise<GetContentWithRevisionMobileHtmlResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-html/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get styles and scripts for offline consumption of mobile-html-formatted pages
     * Provides links to scripts and styles needed for viewing mobile-html-formatted pages offline.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns string links to scripts and styles to accompany the mobile-html of the page for offline consumption
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageMobileHtmlOfflineResourcesByTitle(data: GetPageMobileHtmlOfflineResourcesByTitleData): CancelablePromise<GetPageMobileHtmlOfflineResourcesByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-html-offline-resources/{title}',
            path: {
                title: data.title
            }
        });
    }
    
    /**
     * Get styles and scripts for offline consumption of mobile-html-formatted pages
     * Provides links to scripts and styles needed for viewing mobile-html-formatted pages offline.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @returns string links to scripts and styles to accompany the mobile-html of the page for offline consumption
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageMobileHtmlOfflineResourcesByTitleByRevision(data: GetPageMobileHtmlOfflineResourcesByTitleByRevisionData): CancelablePromise<GetPageMobileHtmlOfflineResourcesByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-html-offline-resources/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            }
        });
    }
    
    /**
     * Get pages related to the given title
     * Returns summaries for 20 pages related to the given page. Summaries include
     * page title, namespace and id along with short text description of the page
     * and a thumbnail.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns related The related pages
     * @returns problem Error
     * @throws ApiError
     */
    public static getRelatedPages(data: GetRelatedPagesData): CancelablePromise<GetRelatedPagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/related/{title}',
            path: {
                title: data.title
            },
            errors: {
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get content for a random page
     * Redirects the client to the URI for the desired format for a random page title.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.format The desired return format
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageRandomByFormat(data: GetPageRandomByFormatData): CancelablePromise<GetPageRandomByFormatResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/random/{format}',
            path: {
                format: data.format
            },
            errors: {
                303: 'The redirect to the desired format URI for a random page'
            }
        });
    }
    
    /**
     * Get a page as PDF
     * Renders the page content as PDF. Format and type are optional parameters and
     * the default values are "a4" for format and "desktop" for type.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns string The PDF render of an article
     * @returns problem Error
     * @throws ApiError
     */
    public static getPagePdfByTitle(data: GetPagePdfByTitleData): CancelablePromise<GetPagePdfByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/pdf/{title}',
            path: {
                title: data.title
            },
            errors: {
                404: 'Unknown page title',
                503: 'A response is unavailable because service queue is busy or full'
            }
        });
    }
    
    /**
     * Get a page as PDF
     * Renders the page content as PDF. Format and type are optional parameters and
     * the default values are "a4" for format and "desktop" for type.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.format PDF format
     * @returns string The PDF render of an article
     * @returns problem Error
     * @throws ApiError
     */
    public static getPagePdfByTitleByFormat(data: GetPagePdfByTitleByFormatData): CancelablePromise<GetPagePdfByTitleByFormatResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/pdf/{title}/{format}',
            path: {
                title: data.title,
                format: data.format
            },
            errors: {
                404: 'Unknown page title',
                503: 'A response is unavailable because service queue is busy or full'
            }
        });
    }
    
    /**
     * Get a page as PDF
     * Renders the page content as PDF. Format and type are optional parameters and
     * the default values are "a4" for format and "desktop" for type.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.format PDF format
     * @param data.type PDF type - `mobile` (optimized for reading on mobile devices) or `desktop` (regular PDF). `desktop` is the default render mode and it will used if param `type` is not passed
     * @returns string The PDF render of an article
     * @returns problem Error
     * @throws ApiError
     */
    public static getPagePdfByTitleByFormatByType(data: GetPagePdfByTitleByFormatByTypeData): CancelablePromise<GetPagePdfByTitleByFormatByTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/pdf/{title}/{format}/{type}',
            path: {
                title: data.title,
                format: data.format,
                type: data.type
            },
            errors: {
                404: 'Unknown page title',
                503: 'A response is unavailable because service queue is busy or full'
            }
        });
    }
    
}

export class MobileService {
    /**
     * Get mobile-optimized HTML sections for a title.
     * Retrieve the latest HTML for a page title optimised for viewing with
     * native mobile applications. Note that the output is split by sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown JSON containing HTML sections and metadata for the given page title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getSections(data: GetSectionsData): CancelablePromise<GetSectionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-sections/{title}',
            path: {
                title: data.title
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get mobile-optimized HTML sections for a title.
     * Retrieve the latest HTML for a page title optimised for viewing with
     * native mobile applications. Note that the output is split by sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown JSON containing HTML sections and metadata for the given page title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getSectionsWithRevision(data: GetSectionsWithRevisionData): CancelablePromise<GetSectionsWithRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-sections/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get mobile-optimized HTML lead section and metadata for a title.
     * Retrieve the lead section of the latest HTML for a page title optimised
     * for viewing with native mobile applications.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown The HTML for the given page title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getSectionsLead(data: GetSectionsLeadData): CancelablePromise<GetSectionsLeadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-sections-lead/{title}',
            path: {
                title: data.title
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get mobile-optimized HTML lead section and metadata for a title.
     * Retrieve the lead section of the latest HTML for a page title optimised
     * for viewing with native mobile applications.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown The HTML for the given page title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getSectionsLeadWithRevision(data: GetSectionsLeadWithRevisionData): CancelablePromise<GetSectionsLeadWithRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-sections-lead/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get non-lead mobile-optimized HTML sections for a title.
     * Retrieve the remainder of the latest HTML (without the lead section) for
     * a page title optimised for viewing with native mobile applications,
     * provided as a JSON object containing the sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown JSON wrapping HTML sections for the given page title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getSectionsRemaining(data: GetSectionsRemainingData): CancelablePromise<GetSectionsRemainingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-sections-remaining/{title}',
            path: {
                title: data.title
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get non-lead mobile-optimized HTML sections for a title.
     * Retrieve the remainder of the latest HTML (without the lead section) for
     * a page title optimised for viewing with native mobile applications,
     * provided as a JSON object containing the sections.
     *
     * Stability: [deprecated](https://www.mediawiki.org/wiki/API_versioning#Deprecated)
     *
     * [Here](https://lists.wikimedia.org/hyperkitty/list/mediawiki-api-announce@lists.wikimedia.org/thread/ZBYSZ4VQYIVZFOCEUNCL3ZSSIEECBK6H/) you can find
     * more information about the endpoint deprecation.
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @returns unknown JSON wrapping HTML sections for the given page title.
     * @returns problem Error
     * @throws ApiError
     */
    public static getSectionsRemainingWithRevision(data: GetSectionsRemainingWithRevisionData): CancelablePromise<GetSectionsRemainingWithRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-sections-remaining/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get CSS for mobile apps.
     * Gets common CSS mobile apps need to properly display pages using Page Content Service.
     * In most cases all of the types are needed (preferably in this order):
     * * base (Common mobile CSS from ResourceLoader)
     * * site (Site-specific, mobile CSS from ResourceLoader, as defined in MediaWiki\:Mobile.css)
     * * pcs (CSS for the Page Content Service)
     *
     * The `base` and `pcs` responses are the same regardless of what domain is used.
     * For these we suggest meta.wikimedia.org.
     *
     * You can still pass pagelib for type, but this is a legacy version of the CSS for
     * existing app clients.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.type The desired CSS bundle
     * @returns unknown Success
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataCssMobileByType(data: GetDataCssMobileByTypeData): CancelablePromise<GetDataCssMobileByTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/css/mobile/{type}',
            path: {
                type: data.type
            }
        });
    }
    
    /**
     * Get JavaScript for mobileapps
     * Gets the JavaScript bundle so that clients can have
     * convenient access to that for consuming the page HTML.
     * Amongst other things,
     * * it allows to detect the platform and through that enable platform specific CSS rules,
     * * has code to lazy load images on the page,
     * * code for collapsing and expanding tables.
     *
     * Valid types are pagelib or pcs. Passing pcs will return the JavaScript for the
     * Page Content Service. Passing pagelib will return a deprecated legacy version
     * of the wikimedia-page-library JavaScript to support existing app clients.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Unstable)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.type The desired JavaScript bundle
     * @returns unknown Success
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataJavascriptMobileByType(data: GetDataJavascriptMobileByTypeData): CancelablePromise<GetDataJavascriptMobileByTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/javascript/mobile/{type}',
            path: {
                type: data.type
            }
        });
    }
    
    /**
     * Get internationalization info
     * Gets internationalization information for the given site. Currently the only
     * supported type is pcs for the Page Content Service.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.type The desired internationalization bundle
     * @returns unknown Success
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataI18nByType(data: GetDataI18nByTypeData): CancelablePromise<GetDataI18nByTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/i18n/{type}',
            path: {
                type: data.type
            }
        });
    }
    
}

export class OfflineService {
    /**
     * Get styles and scripts for offline consumption of mobile-html-formatted pages
     * Provides links to scripts and styles needed for viewing mobile-html-formatted pages offline.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @returns string links to scripts and styles to accompany the mobile-html of the page for offline consumption
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageMobileHtmlOfflineResourcesByTitle(data: GetPageMobileHtmlOfflineResourcesByTitleData): CancelablePromise<GetPageMobileHtmlOfflineResourcesByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-html-offline-resources/{title}',
            path: {
                title: data.title
            }
        });
    }
    
    /**
     * Get styles and scripts for offline consumption of mobile-html-formatted pages
     * Provides links to scripts and styles needed for viewing mobile-html-formatted pages offline.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @returns string links to scripts and styles to accompany the mobile-html of the page for offline consumption
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageMobileHtmlOfflineResourcesByTitleByRevision(data: GetPageMobileHtmlOfflineResourcesByTitleByRevisionData): CancelablePromise<GetPageMobileHtmlOfflineResourcesByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/mobile-html-offline-resources/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            }
        });
    }
    
}

export class TalkPagesService {
    /**
     * Get structured talk page contents
     * Gets structured talk page contents for the provided title.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns string structured talk page JSON.
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageTalkByTitle(data: GetPageTalkByTitleData): CancelablePromise<GetPageTalkByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/talk/{title}',
            path: {
                title: data.title
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Get structured talk page contents
     * Gets structured talk page contents for the provided title.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Experimental)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     * @param data.redirect Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     * @returns string structured talk page JSON.
     * @returns problem Error
     * @throws ApiError
     */
    public static getPageTalkByTitleByRevision(data: GetPageTalkByTitleByRevisionData): CancelablePromise<GetPageTalkByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/page/talk/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            query: {
                redirect: data.redirect
            },
            errors: {
                301: `A permanent redirect is returned if the supplied article title was not in the normalized form.
To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
title normalization client-side.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                302: `The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
The \`location\` header points to the redirect target.
If you would like to avoid automatically following redirect pages, set the \`redirect=false\` query parameter.

Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like \`Api-User-Agent\`)
will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
`,
                404: 'Unknown page title'
            }
        });
    }
    
}

export class FeedService {
    /**
     * Aggregated featured content
     * Provides the aggregated feed content for the given date. The endpoint returns
     * the featured article of the day, most read articles for the previous day, news
     * content and the featured image and video of the day.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.yyyy Year the aggregated content is requested for
     * @param data.mm Month the aggregated content is requested for, 0-padded
     * @param data.dd Day of the month the aggregated content is requested for, 0-padded
     * @returns feed JSON containing all of the featured content
     * @returns problem Error
     * @throws ApiError
     */
    public static aggregatedFeed(data: AggregatedFeedData): CancelablePromise<AggregatedFeedResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/feed/featured/{yyyy}/{mm}/{dd}',
            path: {
                yyyy: data.yyyy,
                mm: data.mm,
                dd: data.dd
            }
        });
    }
    
    /**
     * Current announcements to display
     * Gets announcements for display in the official Wikipedia iOS and Android apps.
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @returns announcementsResponse Announcements for the given Wiki
     * @throws ApiError
     */
    public static getFeedAnnouncements(): CancelablePromise<GetFeedAnnouncementsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/feed/announcements'
        });
    }
    
    /**
     * Events on this day
     * Provides events that historically happened on the provided day and month.
     * Supported types of events are:
     * - All: all of the following
     * - Selected: a list of a few selected anniversaries which occur on the provided day and month; often the entries are curated for the current year
     * - Births: a list of birthdays which happened on the provided day and month
     * - Deaths: a list of deaths which happened on the provided day and month
     * - Holidays: a list of fixed holidays celebrated on the provided day and month
     * - Events: a list of significant events which happened on the provided day and month and which are not covered by the other types yet
     *
     * Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     *
     * @param data The data for the request.
     * @param data.type Type of events
     * @param data.mm Month events are requested for, 0-padded
     * @param data.dd Day of the month events are requested for, 0-padded
     * @returns onthisdayResponse JSON containing all of the featured content
     * @returns problem Error
     * @throws ApiError
     */
    public static onThisDay(data: OnThisDayData): CancelablePromise<OnThisDayResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/feed/onthisday/{type}/{mm}/{dd}',
            path: {
                type: data.type,
                mm: data.mm,
                dd: data.dd
            },
            errors: {
                404: 'No data found for the requested date',
                501: 'Unsupported language'
            }
        });
    }
    
}

export class TransformsService {
    /**
     * Transform HTML to Wikitext
     * Transform [Parsoid HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)
     * to Wikitext.
     *
     * When converting pre-existing (possibly modified) content, you should
     * pass in the `title`, `revision`, and `If-Match` header. This lets
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) preserve small
     * syntactic variations in wikitext, which ensures that diffs are
     * readable.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s
     *
     * @param data The data for the request.
     * @param data.formData
     * @param data.ifMatch The `ETag` header of the original render indicating it's revision and timeuuid.
     * Required if both `title` and `revision` parameters are present.
     *
     * @returns string MediaWiki Wikitext.
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformHtmlToWikitext(data: PostTransformHtmlToWikitextData): CancelablePromise<PostTransformHtmlToWikitextResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/html/to/wikitext',
            headers: {
                'if-match': data.ifMatch
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page title or revision',
                409: 'Revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Transform HTML to Wikitext
     * Transform [Parsoid HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)
     * to Wikitext.
     *
     * When converting pre-existing (possibly modified) content, you should
     * pass in the `title`, `revision`, and `If-Match` header. This lets
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) preserve small
     * syntactic variations in wikitext, which ensures that diffs are
     * readable.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.formData
     * @param data.ifMatch The `ETag` header of the original render indicating it's revision and timeuuid.
     * Required if both `title` and `revision` parameters are present.
     *
     * @returns string MediaWiki Wikitext.
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformHtmlToWikitextByTitle(data: PostTransformHtmlToWikitextByTitleData): CancelablePromise<PostTransformHtmlToWikitextByTitleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/html/to/wikitext/{title}',
            path: {
                title: data.title
            },
            headers: {
                'if-match': data.ifMatch
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page title or revision',
                409: 'Revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Transform HTML to Wikitext
     * Transform [Parsoid HTML](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec)
     * to Wikitext.
     *
     * When converting pre-existing (possibly modified) content, you should
     * pass in the `title`, `revision`, and `If-Match` header. This lets
     * [Parsoid](https://www.mediawiki.org/wiki/Parsoid) preserve small
     * syntactic variations in wikitext, which ensures that diffs are
     * readable.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The page revision
     * @param data.formData
     * @param data.ifMatch The `ETag` header of the original render indicating it's revision and timeuuid.
     * Required if both `title` and `revision` parameters are present.
     *
     * @returns string MediaWiki Wikitext.
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformHtmlToWikitextByTitleByRevision(data: PostTransformHtmlToWikitextByTitleByRevisionData): CancelablePromise<PostTransformHtmlToWikitextByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/html/to/wikitext/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            headers: {
                'if-match': data.ifMatch
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'Access to the specific revision is restricted',
                404: 'Unknown page title or revision',
                409: 'Revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Transform Wikitext to HTML
     * Transform wikitext to HTML. Note that if you set `stash: true`, you
     * also need to supply the title.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     *
     * @param data The data for the request.
     * @param data.formData
     * @returns string See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformWikitextToHtml(data: PostTransformWikitextToHtmlData): CancelablePromise<PostTransformWikitextToHtmlResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/html',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'access to the specific revision is restricted',
                404: 'Unknown page title or revision',
                409: 'Revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Transform Wikitext to HTML
     * Transform wikitext to HTML. Note that if you set `stash: true`, you
     * also need to supply the title.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.formData
     * @returns string See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformWikitextToHtmlByTitle(data: PostTransformWikitextToHtmlByTitleData): CancelablePromise<PostTransformWikitextToHtmlByTitleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/html/{title}',
            path: {
                title: data.title
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'access to the specific revision is restricted',
                404: 'Unknown page title or revision',
                409: 'Revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Transform Wikitext to HTML
     * Transform wikitext to HTML. Note that if you set `stash: true`, you
     * also need to supply the title.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The page revision
     * @param data.formData
     * @returns string See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformWikitextToHtmlByTitleByRevision(data: PostTransformWikitextToHtmlByTitleByRevisionData): CancelablePromise<PostTransformWikitextToHtmlByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/html/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                403: 'access to the specific revision is restricted',
                404: 'Unknown page title or revision',
                409: 'Revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Check Wikitext for lint errors
     * Parse the supplied wikitext and check it for lint errors.
     *
     * - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     * - Rate limit: 25 req/s
     *
     * @param data The data for the request.
     * @param data.formData
     * @returns unknown Linter errors, if any, as a JSON blob
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformWikitextToLint(data: PostTransformWikitextToLintData): CancelablePromise<PostTransformWikitextToLintResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/lint',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                404: 'Unknown page title',
                409: 'Latest revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Check Wikitext for lint errors
     * Parse the supplied wikitext and check it for lint errors.
     *
     * - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     * - Rate limit: 25 req/s
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.formData
     * @returns unknown Linter errors, if any, as a JSON blob
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformWikitextToLintByTitle(data: PostTransformWikitextToLintByTitleData): CancelablePromise<PostTransformWikitextToLintByTitleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/lint/{title}',
            path: {
                title: data.title
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                404: 'Unknown page title',
                409: 'Latest revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Check Wikitext for lint errors
     * Parse the supplied wikitext and check it for lint errors.
     *
     * - Stability: [experimental](https://www.mediawiki.org/wiki/API_versioning#Experimental)
     * - Rate limit: 25 req/s
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.revision The page revision
     * @param data.formData
     * @returns unknown Linter errors, if any, as a JSON blob
     * @returns problem Error
     * @throws ApiError
     */
    public static postTransformWikitextToLintByTitleByRevision(data: PostTransformWikitextToLintByTitleByRevisionData): CancelablePromise<PostTransformWikitextToLintByTitleByRevisionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/lint/{title}/{revision}',
            path: {
                title: data.title,
                revision: data.revision
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                404: 'Unknown page title',
                409: 'Latest revision was restricted',
                410: 'Page was deleted'
            }
        });
    }
    
    /**
     * Transform Wikitext to Mobile HTML
     * Transform wikitext to Mobile HTML.
     *
     * - Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)
     * - Rate limit: 25 req/s (5 req/s when `stash: true`)
     *
     * Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.
     *
     * @param data The data for the request.
     * @param data.title Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     * @param data.formData
     * @param data.acceptLanguage The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     * @param data.outputMode Output mode for mobile-html. Default is `editPreview`.
     * @returns string See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
     * @returns problem Error
     * @throws ApiError
     */
    public static transformWikitextToMobileHtml(data: TransformWikitextToMobileHtmlData): CancelablePromise<TransformWikitextToMobileHtmlResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/wikitext/to/mobile-html/{title}',
            path: {
                title: data.title
            },
            headers: {
                'Accept-Language': data.acceptLanguage,
                'output-mode': data.outputMode
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                404: 'Unknown page title'
            }
        });
    }
    
    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source
     * to the language of this wiki.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.from The source language code
     * @param data.formData
     * @returns cx_mt The translated content
     * @returns problem Error
     * @throws ApiError
     */
    public static doMt(data: DoMtData): CancelablePromise<DoMtResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/html/from/{from}',
            path: {
                from: data.from
            },
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded'
        });
    }
    
    /**
     * Machine-translate content
     * Fetches the machine translation for the posted content from the source
     * to the language of this wiki.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.from The source language code
     * @param data.provider The machine translation provider id
     * @param data.formData
     * @returns cx_mt The translated content
     * @returns problem Error
     * @throws ApiError
     */
    public static doMtProvider(data: DoMtProviderData): CancelablePromise<DoMtProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/transform/html/from/{from}/{provider}',
            path: {
                from: data.from,
                provider: data.provider
            },
            formData: data.formData,
            mediaType: 'multipart/form-data'
        });
    }
    
    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays
     * it in the target language.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.from The source language code
     * @param data.word The word to lookup
     * @returns cx_dict the dictionary translation for the given word
     * @returns problem Error
     * @throws ApiError
     */
    public static doDict(data: DoDictData): CancelablePromise<DoDictResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/transform/word/from/{from}/{word}',
            path: {
                from: data.from,
                word: data.word
            }
        });
    }
    
    /**
     * Fetch the dictionary meaning of a word
     * Fetches the dictionary meaning of a word from a language and displays
     * it in the target language.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.from The source language code
     * @param data.word The word to lookup
     * @param data.provider The dictionary provider id
     * @returns cx_dict the dictionary translation for the given word
     * @returns problem Error
     * @throws ApiError
     */
    public static doDictProvider(data: DoDictProviderData): CancelablePromise<DoDictProviderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/transform/word/from/{from}/{word}/{provider}',
            path: {
                from: data.from,
                word: data.word,
                provider: data.provider
            }
        });
    }
    
}

export class MathService {
    /**
     * Check and normalize a TeX formula.
     * Checks the supplied TeX formula for correctness and returns the
     * normalised formula representation as well as information about
     * identifiers. Available types are tex and inline-tex. The response
     * contains the `x-resource-location` header which can be used to retrieve
     * the render of the checked formula in one of the supported rendering
     * formats. Just append the value of the header to `/media/math/{format}/`
     * and perform a GET request against that URL.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     *
     * @param data The data for the request.
     * @param data.type The input type of the given formula; can be tex or inline-tex
     * @param data.formData
     * @returns unknown Information about the checked formula
     * @returns problem Error
     * @throws ApiError
     */
    public static postMediaMathCheckByType(data: PostMediaMathCheckByTypeData): CancelablePromise<PostMediaMathCheckByTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/media/math/check/{type}',
            path: {
                type: data.type
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Invalid type'
            }
        });
    }
    
    /**
     * Get a previously-stored formula
     * Returns the previously-stored formula via `/media/math/check/{type}` for
     * the given hash.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     *
     * @param data The data for the request.
     * @param data.hash The hash string of the previous POST data
     * @returns unknown Information about the checked formula
     * @returns problem Error
     * @throws ApiError
     */
    public static getMediaMathFormulaByHash(data: GetMediaMathFormulaByHashData): CancelablePromise<GetMediaMathFormulaByHashResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/media/math/formula/{hash}',
            path: {
                hash: data.hash
            },
            errors: {
                404: 'Data for the given hash cannot be found'
            }
        });
    }
    
    /**
     * Get rendered formula in the given format.
     * Given a request hash, renders a TeX formula into its mathematic
     * representation in the given format. When a request is issued to the
     * `/media/math/check/{format}` POST endpoint, the response contains the
     * `x-resource-location` header denoting the hash ID of the POST data. Once
     * obtained, this endpoint has to be used to obtain the actual render.
     *
     * Stability: [stable](https://www.mediawiki.org/wiki/API_versioning#Stable).
     *
     * @param data The data for the request.
     * @param data.format The output format; can be svg or mml
     * @param data.hash The hash string of the previous POST data
     * @returns string The rendered formula
     * @returns problem Error
     * @throws ApiError
     */
    public static getMediaMathRenderByFormatByHash(data: GetMediaMathRenderByFormatByHashData): CancelablePromise<GetMediaMathRenderByFormatByHashResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/media/math/render/{format}/{hash}',
            path: {
                format: data.format,
                hash: data.hash
            },
            errors: {
                404: 'Unknown format or hash ID'
            }
        });
    }
    
}

export class CitationService {
    /**
     * Get citation data given an article identifier.
     * Generates citation data given a URL, DOI, PMID, or PMCID.
     *
     * Automated requests can be made at a rate of 1 request per second (rps).
     *
     * See more at [Citoid service documentation](https://www.mediawiki.org/wiki/Citoid)
     *
     * The citation data can be requested in one of the following formats:
     * - `mediawiki`: format designed for MediaWiki to be used with `templateData`.
     * Uses [Zotero field names](https://aurimasv.github.io/z2csl/typeMap.xml).
     * - `mediawiki-basefields`: `mediawiki` format with Zotero `basefield` field names.
     * - `zotero`: format used by [Zotero](https://www.zotero.org/).
     * - `bibtex`: format used in conjunction with LaTeX documents.
     * See [bibtex.org](http://www.bibtex.org/).
     * - `wikibase`: format designed for [Wikibase](https://www.mediawiki.org/wiki/Extension:Wikibase_Repository).
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.format The format to use for the resulting citation data
     * @param data.query URL of an article, DOI, PMCID or PMID in the URL-encoded format. Note that on the Swagger-UI doc page you don't need to URI-encode the parameter manually, it will be done by the docs engine.
     *
     * @param data.acceptLanguage For some articles the result depends on the `Accept-Language` header, so provide it if localized content is required.
     *
     * @returns result The citation data in the requested format
     * @throws ApiError
     */
    public static getCitation(data: GetCitationData): CancelablePromise<GetCitationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/citation/{format}/{query}',
            path: {
                format: data.format,
                query: data.query
            },
            headers: {
                'Accept-Language': data.acceptLanguage
            },
            errors: {
                404: 'Citation data was not found.'
            }
        });
    }
    
}

export class ReadingListsService {
    /**
     * Opt in to use reading lists.
     * Must precede other list operations.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @returns unknown Success.
     * @returns problem Error
     * @throws ApiError
     */
    public static postDataListsSetup(data: PostDataListsSetupData): CancelablePromise<PostDataListsSetupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/data/lists/setup',
            query: {
                csrf_token: data.csrfToken
            }
        });
    }
    
    /**
     * Opt out from using reading lists.
     * Deletes all data. User needs to opt in again before being able to do anything.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @returns unknown Success.
     * @returns problem Error
     * @throws ApiError
     */
    public static postDataListsTeardown(data: PostDataListsTeardownData): CancelablePromise<PostDataListsTeardownResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/data/lists/teardown',
            query: {
                csrf_token: data.csrfToken
            }
        });
    }
    
    /**
     * Get all lists of the current user.
     * Returns metadata describing the lists of the current user. Might be truncated and include
     * a continuation token.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.next Continuation parameter from previous request
     * @param data.sort Sort order
     * - `name`: by name, ascending;
     * - `updated`: by last modification date, descending.
     *
     * @returns unknown An array of list metadata.
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataLists(data: GetDataListsData = {}): CancelablePromise<GetDataListsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/lists/',
            query: {
                next: data.next,
                sort: data.sort
            }
        });
    }
    
    /**
     * Create a new list for the current user.
     * Creates a new empty list. On name conflict, does nothing and returns the data of an
     * existing list.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * This endpoint is deprecated and might be removed without warning. Use the batch version
     * instead.
     *
     * @param data The data for the request.
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @param data.requestBody
     * @returns unknown The data for the new list.
     * @returns problem Error
     * @throws ApiError
     */
    public static postDataLists(data: PostDataListsData): CancelablePromise<PostDataListsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/data/lists/',
            query: {
                csrf_token: data.csrfToken
            },
            body: data.requestBody,
            mediaType: '*/*'
        });
    }
    
    /**
     * Update a list.
     * List must belong to current user and request must be authenticated with
     * a MediaWiki session cookie. If the name is changed, the new name must not be in use.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.id
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @param data.requestBody
     * @returns unknown The updated data for the list.
     * @returns problem Error
     * @throws ApiError
     */
    public static putDataListsById(data: PutDataListsByIdData): CancelablePromise<PutDataListsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/data/lists/{id}',
            path: {
                id: data.id
            },
            query: {
                csrf_token: data.csrfToken
            },
            body: data.requestBody,
            mediaType: '*/*'
        });
    }
    
    /**
     * Delete a list.
     * List must belong to current user and request must be authenticated with
     * a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Success.
     * @returns problem Error
     * @throws ApiError
     */
    public static deleteDataListsById(data: DeleteDataListsByIdData): CancelablePromise<DeleteDataListsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/data/lists/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * Create multiple new lists for the current user.
     * See `POST /lists/`.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @param data.requestBody
     * @returns unknown The data for the new lists (in the same order as the inputs).
     * @returns problem Error
     * @throws ApiError
     */
    public static postDataListsBatch(data: PostDataListsBatchData): CancelablePromise<PostDataListsBatchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/data/lists/batch',
            query: {
                csrf_token: data.csrfToken
            },
            body: data.requestBody,
            mediaType: '*/*'
        });
    }
    
    /**
     * Get all entries of a given list.
     * Returns pages contained by the given list. Might be truncated and include
     * a continuation token.
     *
     * List must belong to current user and request must be authenticated with
     * a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.id
     * @param data.next Continuation parameter from previous request
     * @param data.sort Sort order
     * - `name`: by page title, ascending;
     * - `updated`: by last modification date, descending.
     *
     * @returns unknown An array of list entries.
     * @returns problem Error
     * @throws ApiError
     */
    public static getListEntries(data: GetListEntriesData): CancelablePromise<GetListEntriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/lists/{id}/entries/',
            path: {
                id: data.id
            },
            query: {
                next: data.next,
                sort: data.sort
            }
        });
    }
    
    /**
     * Create a new list entry.
     * Creates a new list entry in the given list. On conflict, does nothing and returns the
     * data of an existing list.
     *
     * The list must belong to the current user and the request must be
     * authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * This endpoint is deprecated and might be removed without warning. Use the batch version
     * instead.
     *
     * @param data The data for the request.
     * @param data.id
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @param data.requestBody
     * @returns unknown The data for the new list entry.
     * @returns problem Error
     * @throws ApiError
     */
    public static postDataListsByIdEntries(data: PostDataListsByIdEntriesData): CancelablePromise<PostDataListsByIdEntriesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/data/lists/{id}/entries/',
            path: {
                id: data.id
            },
            query: {
                csrf_token: data.csrfToken
            },
            body: data.requestBody,
            mediaType: '*/*'
        });
    }
    
    /**
     * Delete a list entry.
     * Deletes a given list entry.
     *
     * The list must belong to the current user and the request must be
     * authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.id
     * @param data.entryId
     * @returns unknown Success.
     * @returns problem Error
     * @throws ApiError
     */
    public static deleteDataListsByIdEntriesByEntryId(data: DeleteDataListsByIdEntriesByEntryIdData): CancelablePromise<DeleteDataListsByIdEntriesByEntryIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/data/lists/{id}/entries/{entry_id}',
            path: {
                id: data.id,
                entry_id: data.entryId
            }
        });
    }
    
    /**
     * Create multiple new list entries.
     * See `POST /lists/{id}/entries/`.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.id
     * @param data.csrfToken The CRSF edit token provided by the MediaWiki API
     * @param data.requestBody
     * @returns unknown The data for the new list entries (in the same order as the inputs).
     * @returns problem Error
     * @throws ApiError
     */
    public static postDataListsByIdEntriesBatch(data: PostDataListsByIdEntriesBatchData): CancelablePromise<PostDataListsByIdEntriesBatchResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/data/lists/{id}/entries/batch',
            path: {
                id: data.id
            },
            query: {
                csrf_token: data.csrfToken
            },
            body: data.requestBody,
            mediaType: '*/*'
        });
    }
    
    /**
     * Get lists of the current user which contain a given page.
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.project
     * @param data.title
     * @param data.next Continuation parameter from previous request
     * @returns unknown An array of list metadata.
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataListsPagesByProjectByTitle(data: GetDataListsPagesByProjectByTitleData): CancelablePromise<GetDataListsPagesByProjectByTitleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/lists/pages/{project}/{title}',
            path: {
                project: data.project,
                title: data.title
            },
            query: {
                next: data.next
            }
        });
    }
    
    /**
     * Get recent changes to the lists
     * Returns metadata describing lists and entries which have changed. Might be truncated
     * and include a continuation token.
     *
     * Request must be authenticated with a MediaWiki session cookie.
     *
     * For safe synchronization, the date parameter should be taken from the `continue-from`
     * field of a previous `GET /lists/` or `GET /lists/changes/since/{date}` request. This will
     * ensure that no changes are skipped, at the cost of sometimes receiving the same change
     * multitple times. Clients should handle changes in an idempotent way.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.date Cutoff date (in ISO 8601). To ensure reliable synchronization, the API
     * might return changes which are slightly older than the cutoff date.
     *
     * @param data.next Continuation parameter from previous request
     * @returns unknown An array of list and entry metadata.
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataListsChangesSinceByDate(data: GetDataListsChangesSinceByDateData): CancelablePromise<GetDataListsChangesSinceByDateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/lists/changes/since/{date}',
            path: {
                date: data.date
            },
            query: {
                next: data.next
            }
        });
    }
    
}

export class RecommendationService {
    /**
     * Recommend articles for translation.
     * Recommends articles to be translated from the source
     * to the domain language.
     *
     * See more at [Recommendation API documentation](https://meta.wikimedia.org/wiki/Recommendation_API)
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.fromLang The source language code
     * @param data.count The max number of articles to return
     * @returns recommendation_result the list of articles recommended for translation
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataRecommendationArticleCreationTranslationByFromLang(data: GetDataRecommendationArticleCreationTranslationByFromLangData): CancelablePromise<GetDataRecommendationArticleCreationTranslationByFromLangResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/recommendation/article/creation/translation/{from_lang}',
            path: {
                from_lang: data.fromLang
            },
            query: {
                count: data.count
            }
        });
    }
    
    /**
     * Recommend articles for translation.
     * Recommends articles to be translated from the source
     * to the domain language.
     *
     * See more at [Recommendation API documentation](https://meta.wikimedia.org/wiki/Recommendation_API)
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.fromLang The source language code
     * @param data.seedArticle The article to use as a search seed
     * @param data.count The max number of articles to return
     * @returns recommendation_result the list of articles recommended for translation
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataRecommendationArticleCreationTranslationByFromLangBySeedArticle(data: GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleData): CancelablePromise<GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/recommendation/article/creation/translation/{from_lang}/{seed_article}',
            path: {
                from_lang: data.fromLang,
                seed_article: data.seedArticle
            },
            query: {
                count: data.count
            }
        });
    }
    
    /**
     * Recommend missing articles
     * Recommends articles similar to the seed article but are missing
     * from the domain language Wikipedia.
     *
     * Stability: [unstable](https://www.mediawiki.org/wiki/API_versioning#Unstable)
     *
     * @param data The data for the request.
     * @param data.seedArticle The article title used to search similar but missing articles
     * @returns morelike_result the prioritized list of Wikidata IDs recommended for creation as Wikipedia articles
     * @returns problem Error
     * @throws ApiError
     */
    public static getDataRecommendationArticleCreationMorelikeBySeedArticle(data: GetDataRecommendationArticleCreationMorelikeBySeedArticleData): CancelablePromise<GetDataRecommendationArticleCreationMorelikeBySeedArticleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/data/recommendation/article/creation/morelike/{seed_article}',
            path: {
                seed_article: data.seedArticle
            }
        });
    }
    
}