// This file is auto-generated by @hey-api/openapi-ts

/**
 * The result format for revision listing
 */
export type revisions = {
    items: revisionIdentifier;
};

/**
 * The result format for listings
 */
export type listing = {
    items: Array<(string)>;
    _links?: {
        next?: {
            /**
             * Relative link to next result page.
             */
            href?: string;
        };
    };
};

/**
 * Result format for Parsoid data queries
 */
export type data_parsoid = {
    counter: number;
    ids: unknown;
};

/**
 * Result format for revision items
 */
export type revision = {
    count: number;
    items: revisionInfo;
};

/**
 * Complete information about the revision
 */
export type revisionInfo = {
    title?: string;
    page_id?: number;
    rev?: number;
    tid?: string;
    comment?: string;
    restrictions?: Array<(string)>;
    tags?: Array<(string)>;
    user_id?: number;
    user_text?: string;
    timestamp?: string;
    redirect?: boolean;
    page_language?: string;
};

/**
 * Unique revision identifier
 */
export type revisionIdentifier = {
    revision?: number;
    tid?: string;
};

/**
 * a good example of the differences can be seen in https://en.wikipedia.org/api/rest_v1/page/summary/IOS_13
 */
export type titles_set = {
    /**
     * the DB key (non-prefixed), e.g. may have _ instead of spaces, best for making request URIs, still requires Percent-encoding
     */
    canonical: string;
    /**
     * the normalized title (https://www.mediawiki.org/wiki/API:Query#Example_2:_Title_normalization), e.g. may have spaces instead of _
     */
    normalized: string;
    /**
     * the title as it should be displayed to the user
     */
    display: string;
};

export type media_list = {
    /**
     * the revision ID used to create the list
     */
    revision: string;
    /**
     * the time uuid of the page rendering used to create the list
     */
    tid: string;
    /**
     * a list of media items
     */
    items: Array<media_item>;
};

export type media_item = {
    /**
     * The file page title
     */
    title?: string;
    type: 'image' | 'video' | 'audio';
    /**
     * section ID in which the item is found on the page
     */
    section_id: number;
    /**
     * whether the client should show the file in an image gallery presentation
     */
    showInGallery: boolean;
    caption?: {
        /**
         * on-wiki caption for the media item, including all HTML markup
         */
        html?: string;
        /**
         * plain text of the on-wiki caption for the media item
         */
        text?: string;
    };
    /**
     * reference to a Mathoid-rendered math formula image
     */
    original?: {
        /**
         * Mathoid image render URL
         */
        source?: string;
        /**
         * the Mathoid image mime type
         */
        mime?: string;
    };
};

export enum type {
    IMAGE = 'image',
    VIDEO = 'video',
    AUDIO = 'audio'
}

export type related = {
    pages?: Array<summary>;
};

export type problem = {
    type: string;
    title?: string;
    detail?: string;
    instance?: string;
};

export type originalimage = {
    /**
     * Original image URI
     */
    source: string;
    /**
     * Original image width
     */
    width: number;
    /**
     * Original image height
     */
    height: number;
};

export type thumbnail = {
    /**
     * Thumbnail image URI
     */
    source: string;
    /**
     * Thumbnail width
     */
    width: number;
    /**
     * Thumnail height
     */
    height: number;
};

export type summary = {
    titles: titles_set;
    /**
     * The page title.
     * Deprecated: Use `titles.normalized` instead.
     *
     * @deprecated
     */
    title?: string;
    /**
     * The page title how it should be shown to the user.
     * Deprecated: Use `titles.display` instead.
     *
     * @deprecated
     */
    displaytitle?: string;
    /**
     * The page ID
     */
    pageid?: number;
    /**
     * First several sentences of an article in plain text
     */
    extract: string;
    /**
     * First several sentences of an article in simple HTML format
     */
    extract_html?: string;
    thumbnail?: thumbnail;
    originalimage?: originalimage;
    /**
     * The page language code
     */
    lang: string;
    /**
     * The page language direction code
     */
    dir: string;
    /**
     * The time when the page was last edited in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
     */
    timestamp?: string;
    /**
     * Wikidata description for the page
     */
    description?: string;
    /**
     * The coordinates of the item
     */
    coordinates?: {
        /**
         * The latitude
         */
        lat: number;
        /**
         * The longitude
         */
        lon: number;
    };
};

export type cx_mt = {
    /**
     * the translated content
     */
    contents?: string;
};

export type cx_dict = {
    /**
     * the original word to look up
     */
    source?: string;
    /**
     * the translations found
     */
    translations?: Array<{
        /**
         * the translated phrase
         */
        phrase?: string;
        /**
         * extra information about the phrase
         */
        info?: string;
        /**
         * the source dictionary used for the translation
         */
        sources?: string;
    }>;
};

export type mostread_article = {
    /**
     * Article title in a form of DB key
     */
    title: string;
    /**
     * Article title as it should be presented to the user
     */
    normalizedtitle: string;
    /**
     * Number of views on the requested day
     */
    views: number;
    /**
     * Position in the list of most viewed articles
     */
    rank: number;
    thumbnail?: thumbnail;
    /**
     * Wikidata description of the article
     */
    description?: string;
    /**
     * First several sentences of an article in plain text
     */
    extract?: string;
};

export type mostread = {
    /**
     * The date which the data correspond to
     */
    date: string;
    /**
     * Array of most popular articles
     */
    articles: Array<mostread_article>;
};

export type news_item = {
    /**
     * A cover story for the news item
     */
    story: string;
    /**
     * A collection of articles related to the news item
     */
    links: Array<summary>;
};

export type news = Array<news_item>;

export type image_description = {
    /**
     * Text of the description
     */
    text: string;
    /**
     * Language code of the description
     */
    lang: string;
};

export type image = {
    /**
     * Image title
     */
    title: string;
    thumbnail: thumbnail;
    image: thumbnail;
    description?: image_description;
};

export type onthisday = Array<{
    /**
     * Short description of the event
     */
    text?: string;
    /**
     * List of pages related to the event
     */
    pages?: Array<summary>;
}>;

/**
 * Aggregated feed content for a given date
 */
export type feed = {
    tfa?: summary;
    mostread?: mostread;
    news?: news;
    image?: image;
    onthisday?: onthisday;
};

export type action = {
    /**
     * The title to display on the button that performs the action
     */
    title: string;
    /**
     * The URL to navigate to when the button is pressed
     */
    url: string;
};

export type announcement = {
    /**
     * Unique ID of the announcement
     */
    id: string;
    /**
     * The type of announcement. Possible values are "survey" or "fundraising"
     */
    type: string;
    /**
     * The date to begin showing the announcement
     */
    start_time: string;
    /**
     * The date to stop showing the announcement
     */
    end_time: string;
    /**
     * An array of platforms to display the announcement. Possible values are "iOSApp" or "AndroidApp"
     */
    platforms: Array<(string)>;
    /**
     * The text of the announcement
     */
    text: string;
    /**
     * The URL of the image for the announcement
     */
    image?: string;
    action?: action;
    /**
     * HTML to display below the announcement. Usually a privacy statment and link to a policy
     */
    caption_HTML?: string;
    /**
     * An array of country codes in which to display the announcement.
     * Clients should derive the country from 'GeoIP' portion of the Set-Cookie header
     *
     */
    countries: Array<(string)>;
};

export type announcementsResponse = {
    announce: Array<announcement>;
};

/**
 * Lists of events which happened on the provided day and month
 */
export type onthisdayResponse = {
    births?: onthisday;
    deaths?: onthisday;
    events?: onthisday;
    holidays?: onthisday;
    selected?: onthisday;
};

export type result = {
    itemType: string;
    title: string;
    url: string;
};

export type list_read = {
    id: number;
    name: string;
    description?: string;
    /**
     * Creation date (in ISO 8601)
     */
    created: string;
    /**
     * Last modification date (in ISO 8601)
     */
    updated: string;
};

export type list_write = {
    name: string;
    description?: string;
};

export type list_entry_read = {
    id?: number;
    /**
     * Domain of the wiki containing the page.
     */
    project?: string;
    /**
     * Title of the page containing the page, in database format.
     */
    title?: string;
    /**
     * Creation date (in ISO 8601)
     */
    created?: string;
    /**
     * Last modification date (in ISO 8601)
     */
    updated?: string;
};

export type list_entry_write = {
    /**
     * Domain of the wiki containing the page.
     */
    project: string;
    /**
     * Title of the page containing the page, in database format.
     */
    title: string;
};

export type recommendation_result = {
    /**
     * the number of recommendations returned
     */
    count?: number;
    /**
     * the list of articles recommended for translation
     */
    items?: Array<{
        /**
         * wikidata id for the item
         */
        wikidata_id?: string;
        /**
         * title of the article in the source language
         */
        title?: string;
        /**
         * count of sites the wikidata item is linked to
         */
        sitelink_count?: number;
    }>;
};

/**
 * the prioritized list of Wikidata IDs recommended for creation as Wikipedia articles
 */
export type morelike_result = Array<{
    /**
     * Wikidata ID for the item
     */
    wikidata_id?: string;
    /**
     * Score of the recommendation. The higher the score, the more important the recommendation is.
     */
    score?: number;
    /**
     * Source of the recommendation -- which wiki is recommending the current article.
     */
    source_language?: string;
}>;

export type GetPageResponse = listing | problem;

export type GetPageTitleByTitleData = {
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageTitleByTitleResponse = revision | problem;

export type GetPageTitleByTitleByRevisionData = {
    /**
     * The revision id
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageTitleByTitleByRevisionResponse = revision | problem;

export type GetPageHtmlByTitleData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Whether to temporary stash data-parsoid in order to support transforming the
     * modified content later. If this parameter is set, requests are rate-limited on
     * a per-client basis (max 5 requests per second per client)
     *
     */
    stash?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageHtmlByTitleResponse = {
    [key: string]: unknown;
} | problem;

export type GetFormatRevisionData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * The revision
     */
    revision: number;
    /**
     * Whether to temporary stash data-parsoid in order to support transforming the
     * modified content later. If this parameter is set, requests are rate-limited on
     * a per-client basis (max 5 requests per second per client)
     *
     */
    stash?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetFormatRevisionResponse = {
    [key: string]: unknown;
} | problem;

export type GetPageDataParsoidByTitleByRevisionByTidData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * The revision
     */
    revision: number;
    /**
     * The revision's time ID
     */
    tid: string;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageDataParsoidByTitleByRevisionByTidResponse = data_parsoid | problem;

export type GetPageLintByTitleData = {
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageLintByTitleResponse = {
    [key: string]: unknown;
} | problem;

export type GetPageLintByTitleByRevisionData = {
    /**
     * The revision
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageLintByTitleByRevisionResponse = {
    [key: string]: unknown;
} | problem;

export type GetPageSegmentsByTitleData = {
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageSegmentsByTitleResponse = {
    /**
     * The source language of the page
     */
    sourceLanguage?: string;
    /**
     * The title of the segmented page returned
     */
    title?: string;
    /**
     * The revision ID of the segmented page
     */
    revision?: number;
    /**
     * The segmented HTML body of the contents of the page
     */
    segmentedContent?: string;
} | problem;

export type GetPageSegmentsByTitleByRevisionData = {
    /**
     * The revision id
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageSegmentsByTitleByRevisionResponse = {
    /**
     * The source language of the page
     */
    sourceLanguage?: string;
    /**
     * The title of the segmented page returned
     */
    title?: string;
    /**
     * The revision ID of the segmented page
     */
    revision?: number;
    /**
     * The segmented HTML body of the contents of the page
     */
    segmentedContent?: string;
} | problem;

export type GetPageSummaryByTitleData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageSummaryByTitleResponse = summary | problem;

export type GetContentMediaListData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetContentMediaListResponse = media_list | problem;

export type GetContentWithRevisionMediaListData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetContentWithRevisionMediaListResponse = media_list | problem;

export type GetContentMobileHtmlData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetContentMobileHtmlResponse = string | problem;

export type GetContentWithRevisionMobileHtmlData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetContentWithRevisionMobileHtmlResponse = string | problem;

export type GetPageMobileHtmlOfflineResourcesByTitleData = {
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageMobileHtmlOfflineResourcesByTitleResponse = string | problem;

export type GetPageMobileHtmlOfflineResourcesByTitleByRevisionData = {
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageMobileHtmlOfflineResourcesByTitleByRevisionResponse = string | problem;

export type GetRelatedPagesData = {
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetRelatedPagesResponse = related | problem;

export type GetPageRandomByFormatData = {
    /**
     * The desired return format
     */
    format: 'title' | 'html' | 'summary' | 'related' | 'mobile-sections' | 'mobile-sections-lead';
};

export type GetPageRandomByFormatResponse = problem;

export type GetPagePdfByTitleData = {
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPagePdfByTitleResponse = string | problem;

export type GetPagePdfByTitleByFormatData = {
    /**
     * PDF format
     */
    format: 'a4' | 'letter' | 'legal';
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPagePdfByTitleByFormatResponse = string | problem;

export type GetPagePdfByTitleByFormatByTypeData = {
    /**
     * PDF format
     */
    format: 'a4' | 'letter' | 'legal';
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
    /**
     * PDF type - `mobile` (optimized for reading on mobile devices) or `desktop` (regular PDF). `desktop` is the default render mode and it will used if param `type` is not passed
     */
    type?: 'mobile' | 'desktop';
};

export type GetPagePdfByTitleByFormatByTypeResponse = string | problem;

export type GetSectionsData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetSectionsResponse = {
    [key: string]: unknown;
} | problem;

export type GetSectionsWithRevisionData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetSectionsWithRevisionResponse = {
    [key: string]: unknown;
} | problem;

export type GetSectionsLeadData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetSectionsLeadResponse = {
    [key: string]: unknown;
} | problem;

export type GetSectionsLeadWithRevisionData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetSectionsLeadWithRevisionResponse = {
    [key: string]: unknown;
} | problem;

export type GetSectionsRemainingData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetSectionsRemainingResponse = {
    [key: string]: unknown;
} | problem;

export type GetSectionsRemainingWithRevisionData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetSectionsRemainingWithRevisionResponse = {
    [key: string]: unknown;
} | problem;

export type GetDataCssMobileByTypeData = {
    /**
     * The desired CSS bundle
     */
    type: 'base' | 'pagelib' | 'pcs' | 'site';
};

export type GetDataCssMobileByTypeResponse = {
    [key: string]: unknown;
} | problem;

export type GetDataJavascriptMobileByTypeData = {
    /**
     * The desired JavaScript bundle
     */
    type: 'pagelib' | 'pcs';
};

export type GetDataJavascriptMobileByTypeResponse = {
    [key: string]: unknown;
} | problem;

export type GetDataI18nByTypeData = {
    /**
     * The desired internationalization bundle
     */
    type: 'pcs';
};

export type GetDataI18nByTypeResponse = {
    [key: string]: unknown;
} | problem;

export type GetPageTalkByTitleData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageTalkByTitleResponse = string | problem;

export type GetPageTalkByTitleByRevisionData = {
    /**
     * Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.
     * To get a 200 response instead, supply `false` to the `redirect` parameter.
     *
     */
    redirect?: boolean;
    /**
     * Optional page revision. Note that older revisions are not stored, so request latency with the revision would be higher.
     *
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type GetPageTalkByTitleByRevisionResponse = string | problem;

export type AggregatedFeedData = {
    /**
     * Day of the month the aggregated content is requested for, 0-padded
     */
    dd: string;
    /**
     * Month the aggregated content is requested for, 0-padded
     */
    mm: string;
    /**
     * Year the aggregated content is requested for
     */
    yyyy: string;
};

export type AggregatedFeedResponse = feed | problem;

export type GetFeedAnnouncementsResponse = announcementsResponse;

export type OnThisDayData = {
    /**
     * Day of the month events are requested for, 0-padded
     */
    dd: string;
    /**
     * Month events are requested for, 0-padded
     */
    mm: string;
    /**
     * Type of events
     */
    type: 'all' | 'selected' | 'births' | 'deaths' | 'events' | 'holidays';
};

export type OnThisDayResponse = onthisdayResponse | problem;

export type PostTransformHtmlToWikitextData = {
    formData: {
        /**
         * The HTML to transform
         */
        html: string;
        /**
         * Normalise the DOM to yield cleaner wikitext?
         */
        scrub_wikitext?: boolean;
    };
    /**
     * The `ETag` header of the original render indicating it's revision and timeuuid.
     * Required if both `title` and `revision` parameters are present.
     *
     */
    ifMatch?: string;
};

export type PostTransformHtmlToWikitextResponse = string | problem;

export type PostTransformHtmlToWikitextByTitleData = {
    formData: {
        /**
         * The HTML to transform
         */
        html: string;
        /**
         * Normalise the DOM to yield cleaner wikitext?
         */
        scrub_wikitext?: boolean;
    };
    /**
     * The `ETag` header of the original render indicating it's revision and timeuuid.
     * Required if both `title` and `revision` parameters are present.
     *
     */
    ifMatch?: string;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type PostTransformHtmlToWikitextByTitleResponse = string | problem;

export type PostTransformHtmlToWikitextByTitleByRevisionData = {
    formData: {
        /**
         * The HTML to transform
         */
        html: string;
        /**
         * Normalise the DOM to yield cleaner wikitext?
         */
        scrub_wikitext?: boolean;
    };
    /**
     * The `ETag` header of the original render indicating it's revision and timeuuid.
     * Required if both `title` and `revision` parameters are present.
     *
     */
    ifMatch?: string;
    /**
     * The page revision
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type PostTransformHtmlToWikitextByTitleByRevisionResponse = string | problem;

export type PostTransformWikitextToHtmlData = {
    formData: {
        /**
         * The Wikitext to transform to HTML
         */
        wikitext: string;
        /**
         * Return only `body.innerHTML`
         */
        body_only?: boolean;
        /**
         * Whether to temporarily stash the result of the transformation
         */
        stash?: boolean;
    };
};

export type PostTransformWikitextToHtmlResponse = string | problem;

export type PostTransformWikitextToHtmlByTitleData = {
    formData: {
        /**
         * The Wikitext to transform to HTML
         */
        wikitext: string;
        /**
         * Return only `body.innerHTML`
         */
        body_only?: boolean;
        /**
         * Whether to temporarily stash the result of the transformation
         */
        stash?: boolean;
    };
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type PostTransformWikitextToHtmlByTitleResponse = string | problem;

export type PostTransformWikitextToHtmlByTitleByRevisionData = {
    formData: {
        /**
         * The Wikitext to transform to HTML
         */
        wikitext: string;
        /**
         * Return only `body.innerHTML`
         */
        body_only?: boolean;
        /**
         * Whether to temporarily stash the result of the transformation
         */
        stash?: boolean;
    };
    /**
     * The page revision
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type PostTransformWikitextToHtmlByTitleByRevisionResponse = string | problem;

export type PostTransformWikitextToLintData = {
    formData: {
        /**
         * The Wikitext to check
         */
        wikitext: string;
    };
};

export type PostTransformWikitextToLintResponse = {
    [key: string]: unknown;
} | problem;

export type PostTransformWikitextToLintByTitleData = {
    formData: {
        /**
         * The Wikitext to check
         */
        wikitext: string;
    };
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type PostTransformWikitextToLintByTitleResponse = {
    [key: string]: unknown;
} | problem;

export type PostTransformWikitextToLintByTitleByRevisionData = {
    formData: {
        /**
         * The Wikitext to check
         */
        wikitext: string;
    };
    /**
     * The page revision
     */
    revision: number;
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type PostTransformWikitextToLintByTitleByRevisionResponse = {
    [key: string]: unknown;
} | problem;

export type TransformWikitextToMobileHtmlData = {
    /**
     * The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.
     *
     */
    acceptLanguage?: string;
    formData: {
        /**
         * The Wikitext to transform to HTML
         */
        wikitext: string;
    };
    /**
     * Output mode for mobile-html. Default is `editPreview`.
     */
    outputMode?: 'editPreview' | 'contentAndReferences' | 'content' | 'references';
    /**
     * Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.
     */
    title: string;
};

export type TransformWikitextToMobileHtmlResponse = string | problem;

export type DoMtData = {
    formData: {
        /**
         * The HTML content to translate
         */
        html: string;
    };
    /**
     * The source language code
     */
    from: string;
};

export type DoMtResponse = cx_mt | problem;

export type DoMtProviderData = {
    formData: {
        /**
         * The HTML content to translate
         */
        html: string;
    };
    /**
     * The source language code
     */
    from: string;
    /**
     * The machine translation provider id
     */
    provider: 'Apertium' | 'Yandex' | 'Youdao';
};

export type DoMtProviderResponse = cx_mt | problem;

export type DoDictData = {
    /**
     * The source language code
     */
    from: string;
    /**
     * The word to lookup
     */
    word: string;
};

export type DoDictResponse = cx_dict | problem;

export type DoDictProviderData = {
    /**
     * The source language code
     */
    from: string;
    /**
     * The dictionary provider id
     */
    provider: 'JsonDict' | 'Dictd';
    /**
     * The word to lookup
     */
    word: string;
};

export type DoDictProviderResponse = cx_dict | problem;

export type PostMediaMathCheckByTypeData = {
    formData: {
        /**
         * The formula to check
         */
        q: string;
    };
    /**
     * The input type of the given formula; can be tex or inline-tex
     */
    type: 'tex' | 'inline-tex' | 'chem';
};

export type PostMediaMathCheckByTypeResponse = {
    [key: string]: unknown;
} | problem;

export type GetMediaMathFormulaByHashData = {
    /**
     * The hash string of the previous POST data
     */
    hash: string;
};

export type GetMediaMathFormulaByHashResponse = {
    [key: string]: unknown;
} | problem;

export type GetMediaMathRenderByFormatByHashData = {
    /**
     * The output format; can be svg or mml
     */
    format: 'svg' | 'mml' | 'png';
    /**
     * The hash string of the previous POST data
     */
    hash: string;
};

export type GetMediaMathRenderByFormatByHashResponse = string | problem;

export type GetCitationData = {
    /**
     * For some articles the result depends on the `Accept-Language` header, so provide it if localized content is required.
     *
     */
    acceptLanguage?: string;
    /**
     * The format to use for the resulting citation data
     */
    format: 'mediawiki' | 'mediawiki-basefields' | 'zotero' | 'bibtex' | 'wikibase';
    /**
     * URL of an article, DOI, PMCID or PMID in the URL-encoded format. Note that on the Swagger-UI doc page you don't need to URI-encode the parameter manually, it will be done by the docs engine.
     *
     */
    query: string;
};

export type GetCitationResponse = result;

export type PostDataListsSetupData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
};

export type PostDataListsSetupResponse = {
    [key: string]: unknown;
} | problem;

export type PostDataListsTeardownData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
};

export type PostDataListsTeardownResponse = {
    [key: string]: unknown;
} | problem;

export type GetDataListsData = {
    /**
     * Continuation parameter from previous request
     */
    next?: string;
    /**
     * Sort order
     * - `name`: by name, ascending;
     * - `updated`: by last modification date, descending.
     *
     */
    sort?: 'name' | 'updated';
};

export type GetDataListsResponse = {
    lists?: Array<list_read>;
    /**
     * Continuation token.
     */
    next?: string;
    /**
     * Timestamp to sync from, to be used with the `GET /lists/changes/since/{date}`
     * endpoint.
     *
     */
    'continue-from'?: string;
} | problem;

export type PostDataListsData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
    requestBody: list_write;
};

export type PostDataListsResponse = {
    /**
     * List ID.
     *
     * Deprecated, will be removed. Use the full list object.
     *
     */
    id: number;
    list: list_read;
} | problem;

export type PutDataListsByIdData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
    id: number;
    requestBody?: list_write;
};

export type PutDataListsByIdResponse = {
    /**
     * List ID.
     *
     * Deprecated, will be removed. Use the full list object.
     *
     */
    id: number;
    list: list_read;
} | problem;

export type DeleteDataListsByIdData = {
    id: number;
};

export type DeleteDataListsByIdResponse = {
    [key: string]: unknown;
} | problem;

export type PostDataListsBatchData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
    requestBody: {
        batch: Array<list_write>;
    };
};

export type PostDataListsBatchResponse = {
    /**
     * Deprecated, will be removed. Use the full list objects instead.
     */
    batch: Array<{
        /**
         * List ID
         */
        id: number;
    }>;
    lists: Array<list_read>;
} | problem;

export type GetListEntriesData = {
    id: number;
    /**
     * Continuation parameter from previous request
     */
    next?: string;
    /**
     * Sort order
     * - `name`: by page title, ascending;
     * - `updated`: by last modification date, descending.
     *
     */
    sort?: 'name' | 'updated';
};

export type GetListEntriesResponse = {
    entries?: Array<list_entry_read>;
    /**
     * Continuation token.
     */
    next?: string;
} | problem;

export type PostDataListsByIdEntriesData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
    id: number;
    requestBody: list_entry_write;
};

export type PostDataListsByIdEntriesResponse = {
    /**
     * List entry ID
     *
     * Deprecated, will be removed. Use the full entry object instead.
     *
     */
    id: number;
    entry: list_entry_read;
} | problem;

export type DeleteDataListsByIdEntriesByEntryIdData = {
    entryId: number;
    id: number;
};

export type DeleteDataListsByIdEntriesByEntryIdResponse = {
    [key: string]: unknown;
} | problem;

export type PostDataListsByIdEntriesBatchData = {
    /**
     * The CRSF edit token provided by the MediaWiki API
     */
    csrfToken: string;
    id: number;
    requestBody: {
        batch: Array<list_entry_write>;
    };
};

export type PostDataListsByIdEntriesBatchResponse = {
    batch: Array<{
        /**
         * List entry ID
         */
        id?: number;
    }>;
    entries: Array<list_entry_read>;
} | problem;

export type GetDataListsPagesByProjectByTitleData = {
    /**
     * Continuation parameter from previous request
     */
    next?: string;
    project: string;
    title: string;
};

export type GetDataListsPagesByProjectByTitleResponse = {
    lists?: Array<list_read>;
    /**
     * Continuation token.
     */
    next?: string;
} | problem;

export type GetDataListsChangesSinceByDateData = {
    /**
     * Cutoff date (in ISO 8601). To ensure reliable synchronization, the API
     * might return changes which are slightly older than the cutoff date.
     *
     */
    date: string;
    /**
     * Continuation parameter from previous request
     */
    next?: string;
};

export type GetDataListsChangesSinceByDateResponse = {
    lists?: Array<list_read>;
    /**
     * Continuation token.
     */
    next?: string;
    /**
     * Timestamp to sync from, to be used with the `GET /lists/changes/since/{date}`
     * endpoint.
     *
     */
    'continue-from'?: string;
} | problem;

export type GetDataRecommendationArticleCreationTranslationByFromLangData = {
    /**
     * The max number of articles to return
     */
    count?: number;
    /**
     * The source language code
     */
    fromLang: string;
};

export type GetDataRecommendationArticleCreationTranslationByFromLangResponse = recommendation_result | problem;

export type GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleData = {
    /**
     * The max number of articles to return
     */
    count?: number;
    /**
     * The source language code
     */
    fromLang: string;
    /**
     * The article to use as a search seed
     */
    seedArticle: string;
};

export type GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleResponse = recommendation_result | problem;

export type GetDataRecommendationArticleCreationMorelikeBySeedArticleData = {
    /**
     * The article title used to search similar but missing articles
     */
    seedArticle: string;
};

export type GetDataRecommendationArticleCreationMorelikeBySeedArticleResponse = morelike_result | problem;

export type $OpenApiTs = {
    '/page/': {
        get: {
            res: {
                /**
                 * A list of page-related API end points.
                 */
                200: listing;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/title/{title}': {
        get: {
            req: GetPageTitleByTitleData;
            res: {
                /**
                 * The latest revision metadata for the provided title.
                 */
                200: revision;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title or no revisions found.
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/title/{title}/{revision}': {
        get: {
            req: GetPageTitleByTitleByRevisionData;
            res: {
                /**
                 * The latest revision metadata for the provided title.
                 */
                200: revision;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid these redirects, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title or no revisions found.
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/html/{title}': {
        get: {
            req: GetPageHtmlByTitleData;
            res: {
                /**
                 * The latest HTML for the given page title.
                 *
                 * See [the MediaWiki DOM
                 * spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a
                 * description of the MediaWiki-specific semantic markup in this HTML.
                 * Note that additional metadata is available in the HTML head.
                 *
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target, and the body contains the actual page contents as HTML.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/html/{title}/{revision}': {
        get: {
            req: GetFormatRevisionData;
            res: {
                /**
                 * The html for the given page, revision and tid.
                 *
                 * See [the MediaWiki DOM
                 * spec](https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec) for a
                 * description of the MediaWiki-specific semantic markup in this HTML.
                 * Note that additional metadata is available in the HTML head.
                 *
                 * This HTML can be edited using arbitrary HTML tools. The modified HTML
                 * can be converted back to wikitext using the
                 * [/transform/html/to/wikitext{/title}{/revision}](#!/Transforms/transform_html_to_wikitext__title___revision__post)
                 * entry point.
                 *
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Invalid revision or tid
                 */
                400: problem;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page, revision or tid
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/data-parsoid/{title}/{revision}/{tid}': {
        get: {
            req: GetPageDataParsoidByTitleByRevisionByTidData;
            res: {
                /**
                 * The latest Parsoid data for the given page
                 */
                200: data_parsoid;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target, and the body contains the actual data-parsoid for the redirect page.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Invalid revision
                 */
                400: problem;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page, revision or tid
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/lint/{title}': {
        get: {
            req: GetPageLintByTitleData;
            res: {
                /**
                 * The lint errors for the given page and optionally revision.
                 *
                 * See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more
                 * details.
                 *
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Invalid revision or tid
                 */
                400: problem;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page, revision or tid
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/lint/{title}/{revision}': {
        get: {
            req: GetPageLintByTitleByRevisionData;
            res: {
                /**
                 * The lint errors for the given page and optionally revision.
                 *
                 * See [the Linter extension docs](https://www.mediawiki.org/wiki/Extension:Linter) for more
                 * details.
                 *
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target, and the body contains the actual page revision contents as HTML.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Invalid revision or tid
                 */
                400: problem;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page, revision or tid
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/segments/{title}': {
        get: {
            req: GetPageSegmentsByTitleData;
            res: {
                /**
                 * The segmented page for the given title and revision
                 */
                200: {
                    /**
                     * The source language of the page
                     */
                    sourceLanguage?: string;
                    /**
                     * The title of the segmented page returned
                     */
                    title?: string;
                    /**
                     * The revision ID of the segmented page
                     */
                    revision?: number;
                    /**
                     * The segmented HTML body of the contents of the page
                     */
                    segmentedContent?: string;
                };
                /**
                 * Invalid revision
                 */
                400: problem;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page or revision
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/segments/{title}/{revision}': {
        get: {
            req: GetPageSegmentsByTitleByRevisionData;
            res: {
                /**
                 * The segmented page for the given title and revision
                 */
                200: {
                    /**
                     * The source language of the page
                     */
                    sourceLanguage?: string;
                    /**
                     * The title of the segmented page returned
                     */
                    title?: string;
                    /**
                     * The revision ID of the segmented page
                     */
                    revision?: number;
                    /**
                     * The segmented HTML body of the contents of the page
                     */
                    segmentedContent?: string;
                };
                /**
                 * Invalid revision
                 */
                400: problem;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page or revision
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/summary/{title}': {
        get: {
            req: GetPageSummaryByTitleData;
            res: {
                /**
                 * The summary for the given page
                 */
                200: summary;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/media-list/{title}': {
        get: {
            req: GetContentMediaListData;
            res: {
                /**
                 * JSON containing metadata of media items appearing on the given page.
                 */
                200: media_list;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/media-list/{title}/{revision}': {
        get: {
            req: GetContentWithRevisionMediaListData;
            res: {
                /**
                 * JSON containing metadata of media items appearing on the given page.
                 */
                200: media_list;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-html/{title}': {
        get: {
            req: GetContentMobileHtmlData;
            res: {
                /**
                 * mobile-optimized HTML of the given page.
                 */
                200: string;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-html/{title}/{revision}': {
        get: {
            req: GetContentWithRevisionMobileHtmlData;
            res: {
                /**
                 * mobile-optimized HTML of the given page.
                 */
                200: string;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-html-offline-resources/{title}': {
        get: {
            req: GetPageMobileHtmlOfflineResourcesByTitleData;
            res: {
                /**
                 * links to scripts and styles to accompany the mobile-html of the page for offline consumption
                 */
                200: string;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-html-offline-resources/{title}/{revision}': {
        get: {
            req: GetPageMobileHtmlOfflineResourcesByTitleByRevisionData;
            res: {
                /**
                 * links to scripts and styles to accompany the mobile-html of the page for offline consumption
                 */
                200: string;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/related/{title}': {
        get: {
            req: GetRelatedPagesData;
            res: {
                /**
                 * The related pages
                 */
                200: related;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/random/{format}': {
        get: {
            req: GetPageRandomByFormatData;
            res: {
                /**
                 * The redirect to the desired format URI for a random page
                 */
                303: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/pdf/{title}': {
        get: {
            req: GetPagePdfByTitleData;
            res: {
                /**
                 * The PDF render of an article
                 */
                200: string;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * A response is unavailable because service queue is busy or full
                 */
                503: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/pdf/{title}/{format}': {
        get: {
            req: GetPagePdfByTitleByFormatData;
            res: {
                /**
                 * The PDF render of an article
                 */
                200: string;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * A response is unavailable because service queue is busy or full
                 */
                503: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/pdf/{title}/{format}/{type}': {
        get: {
            req: GetPagePdfByTitleByFormatByTypeData;
            res: {
                /**
                 * The PDF render of an article
                 */
                200: string;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * A response is unavailable because service queue is busy or full
                 */
                503: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-sections/{title}': {
        get: {
            req: GetSectionsData;
            res: {
                /**
                 * JSON containing HTML sections and metadata for the given page title.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-sections/{title}/{revision}': {
        get: {
            req: GetSectionsWithRevisionData;
            res: {
                /**
                 * JSON containing HTML sections and metadata for the given page title.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-sections-lead/{title}': {
        get: {
            req: GetSectionsLeadData;
            res: {
                /**
                 * The HTML for the given page title.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-sections-lead/{title}/{revision}': {
        get: {
            req: GetSectionsLeadWithRevisionData;
            res: {
                /**
                 * The HTML for the given page title.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-sections-remaining/{title}': {
        get: {
            req: GetSectionsRemainingData;
            res: {
                /**
                 * JSON wrapping HTML sections for the given page title.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/mobile-sections-remaining/{title}/{revision}': {
        get: {
            req: GetSectionsRemainingWithRevisionData;
            res: {
                /**
                 * JSON wrapping HTML sections for the given page title.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/css/mobile/{type}': {
        get: {
            req: GetDataCssMobileByTypeData;
            res: {
                /**
                 * Success
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/javascript/mobile/{type}': {
        get: {
            req: GetDataJavascriptMobileByTypeData;
            res: {
                /**
                 * Success
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/i18n/{type}': {
        get: {
            req: GetDataI18nByTypeData;
            res: {
                /**
                 * Success
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/talk/{title}': {
        get: {
            req: GetPageTalkByTitleData;
            res: {
                /**
                 * structured talk page JSON.
                 */
                200: string;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/page/talk/{title}/{revision}': {
        get: {
            req: GetPageTalkByTitleByRevisionData;
            res: {
                /**
                 * structured talk page JSON.
                 */
                200: string;
                /**
                 * A permanent redirect is returned if the supplied article title was not in the normalized form.
                 * To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform
                 * title normalization client-side.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                301: unknown;
                /**
                 * The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).
                 * The `location` header points to the redirect target.
                 * If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.
                 *
                 * Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)
                 * will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).
                 *
                 */
                302: unknown;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/feed/featured/{yyyy}/{mm}/{dd}': {
        get: {
            req: AggregatedFeedData;
            res: {
                /**
                 * JSON containing all of the featured content
                 */
                200: feed;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/feed/announcements': {
        get: {
            res: {
                /**
                 * Announcements for the given Wiki
                 */
                200: announcementsResponse;
            };
        };
    };
    '/feed/onthisday/{type}/{mm}/{dd}': {
        get: {
            req: OnThisDayData;
            res: {
                /**
                 * JSON containing all of the featured content
                 */
                200: onthisdayResponse;
                /**
                 * No data found for the requested date
                 */
                404: problem;
                /**
                 * Unsupported language
                 */
                501: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/html/to/wikitext': {
        post: {
            req: PostTransformHtmlToWikitextData;
            res: {
                /**
                 * MediaWiki Wikitext.
                 */
                200: string;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page title or revision
                 */
                404: problem;
                /**
                 * Revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/html/to/wikitext/{title}': {
        post: {
            req: PostTransformHtmlToWikitextByTitleData;
            res: {
                /**
                 * MediaWiki Wikitext.
                 */
                200: string;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page title or revision
                 */
                404: problem;
                /**
                 * Revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/html/to/wikitext/{title}/{revision}': {
        post: {
            req: PostTransformHtmlToWikitextByTitleByRevisionData;
            res: {
                /**
                 * MediaWiki Wikitext.
                 */
                200: string;
                /**
                 * Access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page title or revision
                 */
                404: problem;
                /**
                 * Revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/html': {
        post: {
            req: PostTransformWikitextToHtmlData;
            res: {
                /**
                 * See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
                 */
                200: string;
                /**
                 * access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page title or revision
                 */
                404: problem;
                /**
                 * Revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/html/{title}': {
        post: {
            req: PostTransformWikitextToHtmlByTitleData;
            res: {
                /**
                 * See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
                 */
                200: string;
                /**
                 * access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page title or revision
                 */
                404: problem;
                /**
                 * Revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/html/{title}/{revision}': {
        post: {
            req: PostTransformWikitextToHtmlByTitleByRevisionData;
            res: {
                /**
                 * See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
                 */
                200: string;
                /**
                 * access to the specific revision is restricted
                 */
                403: problem;
                /**
                 * Unknown page title or revision
                 */
                404: problem;
                /**
                 * Revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/lint': {
        post: {
            req: PostTransformWikitextToLintData;
            res: {
                /**
                 * Linter errors, if any, as a JSON blob
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Latest revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/lint/{title}': {
        post: {
            req: PostTransformWikitextToLintByTitleData;
            res: {
                /**
                 * Linter errors, if any, as a JSON blob
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Latest revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/lint/{title}/{revision}': {
        post: {
            req: PostTransformWikitextToLintByTitleByRevisionData;
            res: {
                /**
                 * Linter errors, if any, as a JSON blob
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Latest revision was restricted
                 */
                409: problem;
                /**
                 * Page was deleted
                 */
                410: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/wikitext/to/mobile-html/{title}': {
        post: {
            req: TransformWikitextToMobileHtmlData;
            res: {
                /**
                 * See wikipage https://www.mediawiki.org/wiki/Parsoid/MediaWiki_DOM_spec
                 */
                200: string;
                /**
                 * Unknown page title
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/html/from/{from}': {
        post: {
            req: DoMtData;
            res: {
                /**
                 * The translated content
                 */
                200: cx_mt;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/html/from/{from}/{provider}': {
        post: {
            req: DoMtProviderData;
            res: {
                /**
                 * The translated content
                 */
                200: cx_mt;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/word/from/{from}/{word}': {
        get: {
            req: DoDictData;
            res: {
                /**
                 * the dictionary translation for the given word
                 */
                200: cx_dict;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/transform/word/from/{from}/{word}/{provider}': {
        get: {
            req: DoDictProviderData;
            res: {
                /**
                 * the dictionary translation for the given word
                 */
                200: cx_dict;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/media/math/check/{type}': {
        post: {
            req: PostMediaMathCheckByTypeData;
            res: {
                /**
                 * Information about the checked formula
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Invalid type
                 */
                400: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/media/math/formula/{hash}': {
        get: {
            req: GetMediaMathFormulaByHashData;
            res: {
                /**
                 * Information about the checked formula
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Data for the given hash cannot be found
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/media/math/render/{format}/{hash}': {
        get: {
            req: GetMediaMathRenderByFormatByHashData;
            res: {
                /**
                 * The rendered formula
                 */
                200: string;
                /**
                 * Unknown format or hash ID
                 */
                404: problem;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/citation/{format}/{query}': {
        get: {
            req: GetCitationData;
            res: {
                /**
                 * The citation data in the requested format
                 */
                200: result;
                /**
                 * Citation data was not found.
                 */
                404: problem;
            };
        };
    };
    '/data/lists/setup': {
        post: {
            req: PostDataListsSetupData;
            res: {
                /**
                 * Success.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/teardown': {
        post: {
            req: PostDataListsTeardownData;
            res: {
                /**
                 * Success.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/': {
        get: {
            req: GetDataListsData;
            res: {
                /**
                 * An array of list metadata.
                 */
                200: {
                    lists?: Array<list_read>;
                    /**
                     * Continuation token.
                     */
                    next?: string;
                    /**
                     * Timestamp to sync from, to be used with the `GET /lists/changes/since/{date}`
                     * endpoint.
                     *
                     */
                    'continue-from'?: string;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
        post: {
            req: PostDataListsData;
            res: {
                /**
                 * The data for the new list.
                 */
                200: {
                    /**
                     * List ID.
                     *
                     * Deprecated, will be removed. Use the full list object.
                     *
                     */
                    id: number;
                    list: list_read;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/{id}': {
        put: {
            req: PutDataListsByIdData;
            res: {
                /**
                 * The updated data for the list.
                 */
                200: {
                    /**
                     * List ID.
                     *
                     * Deprecated, will be removed. Use the full list object.
                     *
                     */
                    id: number;
                    list: list_read;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
        delete: {
            req: DeleteDataListsByIdData;
            res: {
                /**
                 * Success.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/batch': {
        post: {
            req: PostDataListsBatchData;
            res: {
                /**
                 * The data for the new lists (in the same order as the inputs).
                 */
                200: {
                    /**
                     * Deprecated, will be removed. Use the full list objects instead.
                     */
                    batch: Array<{
                        /**
                         * List ID
                         */
                        id: number;
                    }>;
                    lists: Array<list_read>;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/{id}/entries/': {
        get: {
            req: GetListEntriesData;
            res: {
                /**
                 * An array of list entries.
                 */
                200: {
                    entries?: Array<list_entry_read>;
                    /**
                     * Continuation token.
                     */
                    next?: string;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
        post: {
            req: PostDataListsByIdEntriesData;
            res: {
                /**
                 * The data for the new list entry.
                 */
                200: {
                    /**
                     * List entry ID
                     *
                     * Deprecated, will be removed. Use the full entry object instead.
                     *
                     */
                    id: number;
                    entry: list_entry_read;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/{id}/entries/{entry_id}': {
        delete: {
            req: DeleteDataListsByIdEntriesByEntryIdData;
            res: {
                /**
                 * Success.
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/{id}/entries/batch': {
        post: {
            req: PostDataListsByIdEntriesBatchData;
            res: {
                /**
                 * The data for the new list entries (in the same order as the inputs).
                 */
                200: {
                    batch: Array<{
                        /**
                         * List entry ID
                         */
                        id?: number;
                    }>;
                    entries: Array<list_entry_read>;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/pages/{project}/{title}': {
        get: {
            req: GetDataListsPagesByProjectByTitleData;
            res: {
                /**
                 * An array of list metadata.
                 */
                200: {
                    lists?: Array<list_read>;
                    /**
                     * Continuation token.
                     */
                    next?: string;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/lists/changes/since/{date}': {
        get: {
            req: GetDataListsChangesSinceByDateData;
            res: {
                /**
                 * An array of list and entry metadata.
                 */
                200: {
                    lists?: Array<list_read>;
                    /**
                     * Continuation token.
                     */
                    next?: string;
                    /**
                     * Timestamp to sync from, to be used with the `GET /lists/changes/since/{date}`
                     * endpoint.
                     *
                     */
                    'continue-from'?: string;
                };
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/recommendation/article/creation/translation/{from_lang}': {
        get: {
            req: GetDataRecommendationArticleCreationTranslationByFromLangData;
            res: {
                /**
                 * the list of articles recommended for translation
                 */
                200: recommendation_result;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/recommendation/article/creation/translation/{from_lang}/{seed_article}': {
        get: {
            req: GetDataRecommendationArticleCreationTranslationByFromLangBySeedArticleData;
            res: {
                /**
                 * the list of articles recommended for translation
                 */
                200: recommendation_result;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
    '/data/recommendation/article/creation/morelike/{seed_article}': {
        get: {
            req: GetDataRecommendationArticleCreationMorelikeBySeedArticleData;
            res: {
                /**
                 * the prioritized list of Wikidata IDs recommended for creation as Wikipedia articles
                 */
                200: morelike_result;
                /**
                 * Error
                 */
                default: problem;
            };
        };
    };
};